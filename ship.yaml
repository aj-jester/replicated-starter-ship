assets:
  v1:
    - github:
        repo: replicatedhq/replicated-starter-ship
        path: /base
        dest: ./
        # can be a commit SHA or branch reference, but master is best for quick iteration
        ref: master

## docker image pull secret
    - inline:
        description: Airgap -- image Pull Secret
        when: '{{repl and (ConfigOptionEquals "airgap" "1") (ConfigOptionEquals "airgap_registry_pull_method" "airgap_registry_pull_method_needcreds") }}'
        dest: base/imagepull-generated.yaml
        contents: |
          apiVersion: v1
          kind: Secret
          type: kubernetes.io/dockerconfigjson
          metadata:
            name: imagepull-generated
            namespace: {{repl ConfigOption "namespace"}}
          stringData:
            .dockerconfigjson: |
              {
                "auths": {
                  "{{repl ConfigOption "airgap_registry_address"}}": {
                    "auth": "{{repl (Base64Encode (print (ConfigOption "airgap_registry_pull_username") ":" (ConfigOption "airgap_registry_pull_password")))}}",
                    "email": "fake@fake.com",
                    "username": "{{repl ConfigOption "airgap_registry_pull_username"}}",
                    "password": "{{repl ConfigOption "airgap_registry_pull_password"}}"
                  }
                }
              }
## docker images
    ############# airgap image tar
    - docker:
        when: '{{repl and (ConfigOptionEquals "airgap" "1") (ConfigOptionEquals "airgap_registry_push_method" "airgap_registry_image_tar") }}'
        dest: images/web.tar
        image: nginx:1.5.12-alpine
        source: public
    - inline:
        when: '{{repl and (ConfigOptionEquals "airgap" "1") (ConfigOptionEquals "airgap_registry_push_method" "airgap_registry_image_tar") }}'
        dest: scripts/push-web.sh
        mode: 0777
        contents: |
          #!/bin/bash
          set -e
          echo "pushing nginx..."
          SOURCE_TAG=nginx:1.15.12-alpine
          DEST_TAG={{repl ConfigOption "airgap_registry_address"}}/nginx:1.15.12-alpine
          docker load < images/web.tar
          docker tag $SOURCE_TAG $DEST_TAG
          docker push $DEST_TAG
    ############# airgap push with ~/.dockercfg
    - docker:
        when: '{{repl and (ConfigOptionEquals "airgap" "1") (ConfigOptionEquals "airgap_registry_push_method" "airgap_registry_image_push") (ConfigOptionEquals "airgap_registry_push_type" "airgap_registry_push_type_loggedin")}}'
        dest: "docker://\
          {{repl ConfigOption \"airgap_registry_address\"}}\
          /nginx:1.15.12-alpine"
        image: nginx:1.15.12-alpine
        source: public
    ############# airgap push with user-supplied credentials
    - docker:
        when: '{{repl and (ConfigOptionEquals "airgap" "1") (ConfigOptionEquals "airgap_registry_push_method" "airgap_registry_image_push") (ConfigOptionEquals "airgap_registry_push_type" "airgap_registry_push_type_needcreds")}}'
        dest: "docker://\
          {{repl ConfigOption \"airgap_registry_push_username\"}}:\
          {{repl ConfigOption \"airgap_registry_push_password\"}}@\
          {{repl ConfigOption \"airgap_registry_address\"}}\
          /nginx:1.15.12-alpine"
        image: nginx:1.15.12-alpine
        source: public

config:
  v1:
    - name: app
      title: App Settings
      items:
      - name: nginx_memory
        title: Nginx Memory
        type: text
        default: 100mi
      - name: spline_reticulator_api_key
        title: Spline Reticulator API Key
        help_text: Enter your spline reticulator API key
        type: text
        default: abcdefg1234567890

    - name: kubernetes
      title: Kubernetes
      items:
      - name: namespace
        title: Namespace
        type: text
        # change to your app name
        default: "default"
        required: true
      - name: airgap
        title: Airgap
        help_text: Are you deploying to an airgapped system? (No outbund internet access)
        type: bool
        default: "0"

    - name: airgap
      title: Airgap Settings
      when: '{{repl ConfigOptionEquals "airgap" "1"}}'
      items:
        - name: airgap_registry_address
          title: Docker Registry Host
          help_text: For an airgap install, you'll need to provide the address of a docker registry. A namespace like `/myapp-images` may be included, but is optional.
          type: text
          default: "docker.somebigbank.com/myapp-images"
        - name: airgap_registry_pull_method
          title: Airgap Registry Pull Type
          help_text: How would you like to pull images for your on-prem workloads?
          type: select_one
          items:
            - name: airgap_registry_pull_method_imagepullsecret
              title: I'll separately deploy a Kubernetes imagePullSecret into the application's namespace
            - name: airgap_registry_pull_method_needcreds
              title: I'll provide a username and password with pull access to the registry
            - name: airgap_registry_pull_method_noauth
              title: My registry does not require authentication to pull images
        - name: airgap_registry_pull_username
          title: Docker Registry Username
          help_text: A username that has pull access to the registry
          type: text
          when: '{{repl and (ConfigOptionEquals "airgap_registry_pull_method" "airgap_registry_pull_method_needcreds") }}'
        - name: airgap_registry_pull_password
          title: Docker Registry Password
          help_text: A password that has pull access to the registry
          type: password
          when: '{{repl and (ConfigOptionEquals "airgap_registry_pull_method" "airgap_registry_pull_method_needcreds") }}'
        - name: airgap_registry_pull_secret
          title: Image Pull Secret Name
          help_text: The name of a Kubernetes Image Pull Secret that will be deployed to your cluster in the application's namespace.
          type: text
          when: '{{repl and (ConfigOptionEquals "airgap_registry_pull_method" "airgap_registry_pull_method_imagepullsecret") }}'
        - name: airgap_registry_push_method
          title: Registry Access
          help_text: Does this workstation currently have access to the on-prem registry where your images will be stored??
          type: select_one
          items:
            - name: airgap_registry_image_push
              title: Yes -- I'd like this installer to push the images into my registry
            - name: airgap_registry_image_tar
              title: No -- just give me the docker image archives and I'll handle uploading them to my registry
        - name: airgap_registry_push_type
          title: Airgap Registry Push Type
          help_text:
          type: select_one
          items:
            - name: airgap_registry_push_type_loggedin
              title: I'm already logged in to the docker registry on this workstation.
            - name: airgap_registry_push_type_needcreds
              title: I'll provide a username and password with push access to the registry
          default: "airgap_registry_push_type_needcreds"
          when: '{{repl ConfigOptionEquals "airgap_registry_push_method" "airgap_registry_image_push"}}'
        - name: airgap_registry_push_username
          title: Docker Registry Username
          help_text: A username that has push access to the registry
          type: text
          when: '{{repl and (ConfigOptionEquals "airgap_registry_push_type" "airgap_registry_push_type_needcreds") (ConfigOptionEquals "airgap_registry_push_method" "airgap_registry_image_push") }}'
        - name: airgap_registry_push_password
          title: Docker Registry Username
          help_text: A password that has push access to the registry
          type: password
          when: '{{repl and (ConfigOptionEquals "airgap_registry_push_type" "airgap_registry_push_type_needcreds") (ConfigOptionEquals "airgap_registry_push_method" "airgap_registry_image_push") }}'

lifecycle:
  v1:
    # custom markdown messaging. Replace `My Cool App` with your app name
    - message:
        contents: |
          # My Cool App Installer

          This installer will walk you through setting up a scalable nginx pool for
          `My Cool App` that will serve good web content.

          # Prerequisites

          This installer requires you already have a Kubernetes Cluster.

          ## Airgap vs. Online

          This installer supports two kinds of installations
          - "Online" internet-connected installations, where docker images will be pulled from the internet
          - "Airgap" installations, where your infrastructure does not have outbound internet access.
            In this case you will need an existing docker registry, and credentials with access to the registry.

    # collect info according to the `config.v1` section, above
    - config:
        invalidates: ["render"]
    # render assets
    - render:
        requires: ["config"]
        root: .
    - message:
        contents: |
          # Customize your Kubernetes configs

          Base kubernetes assets have been generated for deploying `My Cool App` to your kubernetes cluster.

          The next step will walk you through adding any last-mile customizations to kubernetes configurations
          before deploying them to your cluster.

          This will give you an opportunity to customize default configuration values,
          and add any additional kubernetes settings in a way that will preserve your
          customizations when pulling in upstream updates for `My Cool App`

          We recommend reviewing the kubernetes resources and making any tweaks to the defaults,
          especially to `config.yaml`.

    - kustomizeIntro: {}
    - kustomize:
        requires: ["render"]
        base: ./base
        overlay: overlays/ship
        dest: rendered.yaml
    - message:
        id: outro
        contents: |
          ## You're all set!

          If you have `kubectl` configured locally, you can deploy `My Cool App` by running

              kubectl apply -f rendered.yaml

